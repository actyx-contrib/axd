[{"/home/oliver/Repos/actyx-diagnostics/client/src/index.tsx":"1","/home/oliver/Repos/actyx-diagnostics/client/src/reportWebVitals.ts":"2","/home/oliver/Repos/actyx-diagnostics/client/src/App.tsx":"3","/home/oliver/Repos/actyx-diagnostics/client/src/state.ts":"4","/home/oliver/Repos/actyx-diagnostics/client/src/Overview.tsx":"5","/home/oliver/Repos/actyx-diagnostics/client/src/Detail.tsx":"6","/home/oliver/Repos/actyx-diagnostics/client/src/server.ts":"7","/home/oliver/Repos/actyx-diagnostics/client/src/Map.tsx":"8","/home/oliver/Repos/actyx-diagnostics/client/src/common/index.ts":"9","/home/oliver/Repos/actyx-diagnostics/client/src/common/types.ts":"10","/home/oliver/Repos/actyx-diagnostics/client/src/common/util.ts":"11"},{"size":500,"mtime":1608483712049,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1608483712049,"results":"14","hashOfConfig":"13"},{"size":1356,"mtime":1608558122882,"results":"15","hashOfConfig":"13"},{"size":2721,"mtime":1608558067340,"results":"16","hashOfConfig":"13"},{"size":11140,"mtime":1608558208154,"results":"17","hashOfConfig":"13"},{"size":10626,"mtime":1608545806745,"results":"18","hashOfConfig":"13"},{"size":1904,"mtime":1608558016767,"results":"19","hashOfConfig":"13"},{"size":4034,"mtime":1608545815116,"results":"20","hashOfConfig":"13"},{"size":46,"mtime":1608545906248,"results":"21","hashOfConfig":"13"},{"size":2417,"mtime":1608545723546,"results":"22","hashOfConfig":"13"},{"size":285,"mtime":1608545723646,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"vwxqep",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"/home/oliver/Repos/actyx-diagnostics/client/src/index.tsx",[],["54","55"],"/home/oliver/Repos/actyx-diagnostics/client/src/reportWebVitals.ts",[],"/home/oliver/Repos/actyx-diagnostics/client/src/App.tsx",["56"],"import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  AppBar,\n  CssBaseline,\n  makeStyles,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { Provider,  useSelector } from \"react-redux\";\nimport { State, store } from \"./state\";\nimport { Overview } from \"./Overview\";\nimport { Detail } from \"./Detail\";\nimport { Map } from \"./Map\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    maxWidth: \"100%\",\n  },\n  content: {\n    padding: 20,\n  },\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst Content = () => {\n  const allNodes = useSelector((s: State) => s.nodes);\n  const nodeToShowDetail = useSelector((s: State) => s.currentDetailNode);\n  const showingMap = useSelector((s: State) => s.showingMap);\n  return showingMap ? <Map nodes={allNodes} /> : nodeToShowDetail ? <Detail node={nodeToShowDetail} /> : <Overview nodes={allNodes} />\n};\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n    <Provider store={store}>\n        <div className={classes.root}>\n          <CssBaseline />\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h6\">Actyx Diagnostics</Typography>\n            </Toolbar>\n          </AppBar>\n          <div className={classes.content}>\n            <Content />\n          </div>\n        </div>\n      </Provider>\n    );\n};\n\nexport default App;\n","/home/oliver/Repos/actyx-diagnostics/client/src/state.ts",["57","58"],"import { Node } from \"./common\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport thunkMiddleware from \"redux-thunk\";\n\nexport interface State {\n  nodes: Node[];\n  showingMap: boolean;\n  currentDetailNode: null | Node;\n}\n\nexport const INITIAL_STATE: State = {\n  nodes: [],\n  showingMap: false,\n  currentDetailNode: null,\n};\n\ninterface RemoveNode {\n  readonly type: \"REMOVE_NODE\";\n  node: Node;\n}\n\ninterface UpdateNode {\n  readonly type: \"UPDATE_NODE\";\n  node: Node;\n}\n\ninterface ShowDetail {\n  readonly type: \"SHOW_DETAIL\";\n  node: Node;\n}\ninterface UnshowDetail {\n  readonly type: \"UNSHOW_DETAIL\";\n}\ninterface ShowMap {\n  readonly type: \"SHOW_MAP\";\n}\ninterface UnshowMap {\n  readonly type: \"UNSHOW_MAP\";\n}\n\nexport type Action = RemoveNode | UpdateNode | ShowDetail | UnshowDetail | ShowMap | UnshowMap\n\nexport const Action = {\n  RemoveNode: (node: Node): RemoveNode => ({\n    type: \"REMOVE_NODE\",\n    node,\n  }),\n  UpdateNode: (node: Node): UpdateNode => ({\n    type: \"UPDATE_NODE\",\n    node,\n  }),\n  ShowDetail: (node: Node): ShowDetail => ({\n    type: \"SHOW_DETAIL\",\n    node,\n  }),\n  UnshowDetail: (): UnshowDetail => ({\n    type: \"UNSHOW_DETAIL\",\n  }),\n  ShowMap: (): ShowMap => ({\n    type: \"SHOW_MAP\",\n  }),\n  UnshowMap: (): UnshowMap => ({\n    type: \"UNSHOW_MAP\",\n  }),\n};\n\nexport const reducer = (state = INITIAL_STATE, action: Action): State => {\n  switch (action.type) {\n    case \"REMOVE_NODE\":\n      return {\n        ...state,\n        nodes: state.nodes.filter((n) => n.addr !== action.node.addr),\n        currentDetailNode:\n          state.currentDetailNode === null ||\n          state.currentDetailNode.addr === action.node.addr\n            ? null\n            : state.currentDetailNode,\n      };\n    case \"UPDATE_NODE\":\n      return {\n        ...state,\n        nodes: state.nodes\n          .filter((n) => n.addr !== action.node.addr)\n          .concat([action.node]),\n        currentDetailNode: state.currentDetailNode === null || state.currentDetailNode.addr !== action.node.addr \n          ? state.currentDetailNode\n          : action.node\n      };\n    case \"SHOW_DETAIL\":\n      return {\n        ...state,\n        currentDetailNode: action.node,\n        showingMap: false\n      };\n    case \"UNSHOW_DETAIL\":\n      return {\n        ...state,\n        currentDetailNode: null,\n      };\n    case \"SHOW_MAP\":\n      return {\n        ...state,\n        // Remove detail node if set\n        currentDetailNode: null,\n        showingMap: true,\n      };\n    case \"UNSHOW_MAP\":\n      return {\n        ...state,\n        showingMap: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer, applyMiddleware(thunkMiddleware));\n","/home/oliver/Repos/actyx-diagnostics/client/src/Overview.tsx",["59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  AppBar,\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Collapse,\n  Container,\n  CssBaseline,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport { Option } from \"fp-ts/Option\";\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"@reduxjs/toolkit\";\nimport { reducer, State, Action, store } from \"./state\";\nimport { Server } from \"./server\";\nimport moment from \"moment\";\nimport { Node } from \"./common\";\n\ninterface ValOrNoneProps<T> {\n  value: T | T[] | undefined | null;\n  label?: string;\n  transform?: (val: T) => string;\n  none?: string;\n  filter?: (val: T) => boolean;\n}\nconst ValueOrNone = <T extends unknown>({\n  value,\n  label,\n  transform,\n  none,\n  filter,\n}: ValOrNoneProps<T>) => {\n  const noneStr = none || \"None\";\n\n  if (\n    value === undefined ||\n    value === null ||\n    (Array.isArray(value) && value.length < 1)\n  ) {\n    return (\n      <>\n        {label ? `${label}: ` : \"\"}\n        {noneStr}\n      </>\n    );\n  }\n  if (Array.isArray(value) && value.length > 1) {\n    return (\n      <>\n        {label ? `${label}: ` : \"\"}\n        <ul>\n          {value\n            .filter((v) => (filter ? filter(v) : true))\n            .map((v, i) => {\n              <li key={v + i.toString()}>\n                {transform\n                  ? transform(v)\n                  : typeof v === \"string\"\n                  ? v\n                  : JSON.stringify(v)}\n              </li>;\n            })}\n        </ul>\n      </>\n    );\n  }\n\n  if (!Array.isArray(value)) {\n    return (\n      <>\n        {label ? `${label}: ` : \"\"}\n        {transform\n          ? transform(value)\n          : typeof value === \"string\"\n          ? value\n          : JSON.stringify(value)}\n      </>\n    );\n  }\n\n  return <>Unknown value</>;\n};\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst NodeRow = ({ node }: { node: Node }) => {\n  const [open, setOpen] = React.useState(false);\n  const classes = makeStyles({\n    root: {\n      \"& > *\": {\n        borderBottom: \"unset\",\n      },\n    },\n  })();\n\n  return (\n    <>\n      <TableRow className={classes.root}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {node.addr}\n        </TableCell>\n        <TableCell>\n          <ValueOrNone\n            value={node.lastRequestAt}\n            transform={(val) => moment(val).format(\"HH:mm:ss\")}\n          />\n        </TableCell>\n        <TableCell>\n          <ValueOrNone\n            value={node.lastResponseAt}\n            transform={(val) => moment(val).format(\"HH:mm:ss\")}\n          />\n        </TableCell>\n        <TableCell>\n          {!node.peers\n            ? \"None \"\n            : node.peers\n                .filter((p) => p.state === \"Connected\")\n                .length.toString()}\n        </TableCell>\n        <TableCell></TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Typography variant=\"body2\">\n                <ul>\n                  <li>\n                    {!node.peers || node.peers.length < 1 ? (\n                      \"Peers: none\"\n                    ) : (\n                      <>\n                        Peers\n                        <ul>\n                          {node.peers.map((p) => (\n                            <li key={p.id}>\n                              <strong>{p.state}</strong> {p.id}:\n                              <ul>\n                                {p.addrs.map((addr) => (\n                                  <li key={p.id + addr}>{addr}</li>\n                                ))}\n                              </ul>\n                            </li>\n                          ))}\n                        </ul>\n                      </>\n                    )}\n                  </li>\n                  <li>\n                    <ValueOrNone\n                      value={node.listenAddrs}\n                      label=\"Listen addresses\"\n                    />\n                  </li>\n                  <li>\n                    Announce addresses:\n                    {(node.settings as any) &&\n                    (node.settings as any).general &&\n                    (node.settings as any).general.announceAddresses.length >\n                      1 ? (\n                      <ul>\n                        {(node.settings as any).general.announceAddresses.map(\n                          (addr: any) => (\n                            <li>{addr}</li>\n                          )\n                        )}\n                      </ul>\n                    ) : (\n                      \"none.\"\n                    )}\n                  </li>\n                  <li>\n                    Bootstrap nodes:\n                    {(node.settings as any) &&\n                    (node.settings as any).general &&\n                    (node.settings as any).general.bootstrapNodes.length > 1 ? (\n                      <ul>\n                        {(node.settings as any).general.bootstrapNodes.map(\n                          (addr: any) => (\n                            <li>{addr}</li>\n                          )\n                        )}\n                      </ul>\n                    ) : (\n                      \"none.\"\n                    )}\n                  </li>\n                </ul>\n              </Typography>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </>\n  );\n};\n\nconst NodesTable = () => {\n  const classes = useStyles();\n  const nodes = useSelector((s: State) => s.nodes);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>Address</TableCell>\n            <TableCell>Last request</TableCell>\n            <TableCell>Last response</TableCell>\n            <TableCell>Peers</TableCell>\n            <TableCell>Addresses</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {nodes\n            .sort((a, b) => a.addr.localeCompare(b.addr))\n            .map((node) => (\n              <NodeRow key={node.addr} node={node} />\n            ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nconst AddNodeForm = () => {\n  const classes = makeStyles((theme) => ({\n    root: {\n      padding: theme.spacing(1),\n    },\n    form: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"baseline\",\n      \"& > *\": {\n        marginRight: 10,\n      },\n    },\n  }))();\n\n  const [addr, setAddr] = useState(\"\");\n  const [err, setErr] = useState(\"\");\n  const dispatch = useDispatch();\n  const nodes = useSelector((s: State) => s.nodes);\n  \n  const showMap = () => {\n    dispatch(Action.ShowMap())\n  }\n\n  const onChangeValue = (value: string) => {\n    setAddr(value);\n    if (nodes.map((n) => n.addr).includes(value)) {\n      setErr(\"Node already added\");\n    } else if (err === \"Node already added\") {\n      setErr(\"\");\n    }\n  };\n\n  const doAdd = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    await Server.AddNode(addr);\n    setAddr(\"\");\n  };\n\n  return (\n    <div className={classes.root}>\n      <form\n        className={classes.form}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={doAdd}\n      >\n        <TextField\n          label=\"Address\"\n          value={addr}\n          onChange={(e) => onChangeValue(e.target.value)}\n          error={err !== \"\"}\n          helperText={err}\n          variant=\"standard\"\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={addr.length === 0 || err !== \"\"}\n          type=\"submit\"\n        >\n          ADD NODE\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={showMap}\n        >\n          VIEW MAP\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nconst Debug = () => {\n  const classes = makeStyles((theme) => ({\n    root: {\n      padding: theme.spacing(1),\n    },\n  }))();\n  const state = useSelector((s: State) => s);\n  return (\n    <div className={classes.root}>\n      <p>State:</p>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n    </div>\n  );\n};\n\nexport const NodeCard = ({ node }: { node: Node }) => {\n  const dispatch = useDispatch();\n  const classes = makeStyles({\n    root: {\n      width: \"100%\",\n    },\n    title: {\n      fontSize: 14,\n    },\n    pos: {\n      marginBottom: 12,\n    },\n  })();\n\n  const showDetail = (node: Node) => {\n    dispatch(Action.ShowDetail(node));\n  };\n\n  const removeNode = async (node: Node) => {\n    await Server.RemoveNode(node);\n  };\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {node.lastResponseAt\n            ? moment(node.lastResponseAt).format(\"[Last seen at] HH:mm:ss\")\n            : \"Never seen\"}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {node.addr}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          {node.settings === null\n            ? \"No information about node available.\"\n            : `Connected to ${\n                node.peers === null\n                  ? \"?\"\n                  : node.peers.filter((p) => p.state === \"Connected\").length\n              } peers. Using ${\n                node.settings.general.bootstrapNodes.length\n              } bootstrap nodes. Announcing ${\n                node.listenAddrs === null ? \"?\" : node.listenAddrs.length\n              } addresses.`}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button onClick={() => showDetail(node)} size=\"small\" color=\"primary\">\n          View details\n        </Button>\n        <Button onClick={() => removeNode(node)} size=\"small\" color=\"secondary\">\n          Remove\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport const Overview = ({ nodes }: {nodes: Node[]}) => {\n  const classes = useStyles();\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <AddNodeForm />\n      </Grid>\n      {nodes\n        .sort((a, b) => a.addr.localeCompare(b.addr))\n        .map((node) => (\n          <Grid key={node.addr} item lg={3} md={4} sm={6} xs={12}>\n            <NodeCard node={node} />\n          </Grid>\n        ))}\n      </Grid>\n  );\n};\n","/home/oliver/Repos/actyx-diagnostics/client/src/Detail.tsx",["75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103"],"import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  AppBar,\n  Box,\n  Button,\n  Collapse,\n  Container,\n  CssBaseline,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Toolbar,\n  Typography,\n  Link,\n} from \"@material-ui/core\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\nimport LaunchIcon from \"@material-ui/icons/Launch\";\nimport { Option } from \"fp-ts/Option\";\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"@reduxjs/toolkit\";\nimport { reducer, State, Action, store } from \"./state\";\nimport { Server } from \"./server\";\nimport moment from \"moment\";\nimport { Node } from \"./common\";\nimport ReactJson from 'react-json-view'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    wordBreak: \"break-word\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  content: {\n    padding: 20,\n  },\n  table: {\n    minWidth: 650,\n  },\n  title: {\n    paddingBottom: theme.spacing(2),\n  },\n  data: {\n    backgroundColor: \"#eaeaea\",\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    fontFamily: \"monospace\",\n    fontWeight: 600,\n    color: \"#3f51b5\",\n  },\n  section: {\n    display: \"block\",\n  },\n  navigate: {\n    \"& > *\": {\n      marginRight: 10,\n    },\n  },\n  swarmStateButton: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\ninterface Props {\n  node: Node;\n}\n\nexport const Detail = ({ node }: Props) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const goBack = () => {\n    dispatch(Action.UnshowDetail());\n  };\n  const showMap = () => {\n    dispatch(Action.ShowMap())\n  }\n  console.log('Rendering detail')\n  return (\n    <div className={classes.root}>\n    <Grid container spacing={3}>\n      <Grid item xs={12} className={classes.navigate}>\n        <Button\n          onClick={goBack}\n          size=\"small\"\n          color=\"default\"\n          variant=\"contained\"\n        >\n          Back\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          onClick={showMap}\n          size=\"small\"\n        >\n          MAP\n        </Button>\n      </Grid>\n      <Grid item xs={12}>\n        <Paper className={classes.paper}>\n          <Typography className={classes.title} variant=\"h6\" gutterBottom>Details about node at <span className={classes.data}>{node.addr}</span></Typography>\n      <Accordion defaultExpanded={true}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n          <Typography variant=\"button\">Diagnostics</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.section}>\n          <Typography variant=\"body1\" gutterBottom>\n            Sent last diagnostics request at: <span className={classes.data}>{!node.lastRequestAt ? 'never' : moment(node.lastRequestAt).format(\"HH:mm:ss\")}</span>\n          </Typography>\n          <Typography variant=\"body1\" gutterBottom>\n            Received last diagnostics response at: <span className={classes.data}>{!node.lastResponseAt ? 'never' : moment(node.lastResponseAt).format(\"HH:mm:ss\")}</span>\n          </Typography>\n          <Typography variant=\"body1\" gutterBottom>\n            Node settings available: <span className={classes.data}>{node.settings !== null ? 'yes' : 'no'}</span>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2a-content\"\n          id=\"panel2a-header\"\n        >\n          <Typography variant=\"button\">Connectivity</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.section}>\n          <Typography variant=\"body1\">\n            Listen addresses:\n          </Typography>\n          <List dense>\n            {!node.listenAddrs &&\n              <ListItem>\n                <ListItemText\n                  primary=\"no info\"\n                />\n              </ListItem>\n            }\n            {node.listenAddrs && node.listenAddrs.length === 0 && \n              <ListItem>\n                <ListItemText\n                  primary=\"none\"\n                />\n              </ListItem>\n            }\n            {node.listenAddrs && node.listenAddrs.map(addr => (\n              <ListItem key={node.addr+'listen'+addr}>\n                <ListItemText\n                  primary={addr}\n                />\n              </ListItem>\n            ))}\n            </List>\n          <Typography variant=\"body1\">\n            Configured bootstrap nodes:\n          </Typography>\n          <List dense>\n            {!node.settings &&\n              <ListItem>\n                <ListItemText\n                  primary=\"no settings\"\n                />\n              </ListItem>\n            }\n            {node.settings && node.settings.general.bootstrapNodes.length === 0 && \n              <ListItem>\n                <ListItemText\n                  primary=\"none\"\n                />\n              </ListItem>\n            }\n            {node.settings && node.settings.general.bootstrapNodes.map(addr => (\n              <ListItem key={node.addr+'bootstrap'+addr}>\n                <ListItemText\n                  primary={addr}\n                />\n              </ListItem>\n            ))}\n            </List>\n          <Typography variant=\"body1\">\n            Configured announce addresses:\n          </Typography>\n          <List dense>\n            {!node.settings &&\n              <ListItem>\n                <ListItemText\n                  primary=\"no settings\"\n                />\n              </ListItem>\n            }\n            {node.settings && node.settings.general.announceAddresses.length === 0 && \n              <ListItem>\n                <ListItemText\n                  primary=\"none\"\n                />\n              </ListItem>\n            }\n            {node.settings && node.settings.general.announceAddresses.map(addr => (\n              <ListItem key={node.addr+'announce'+addr}>\n                <ListItemIcon>\n                  <TrackChangesIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={addr}\n                />\n              </ListItem>\n            ))}\n            </List>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2a-content\"\n          id=\"panel2a-header\"\n        >\n          <Typography variant=\"button\">Peers</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.section}>\n          <Typography variant=\"body1\">\n            Connected:\n          </Typography>\n          <List dense>\n            {!node.peers &&\n              <ListItem>\n                <ListItemText\n                  primary=\"no info received\"\n                />\n              </ListItem>\n            }\n            {node.peers && node.peers.filter(p => p.state === 'Connected').length === 0 && \n              <ListItem>\n                <ListItemText\n                  primary=\"none\"\n                />\n              </ListItem>\n            }\n            {node.peers && node.peers.filter(p => p.state === 'Connected').sort((a,b) => a.id.localeCompare(b.id)).map(peer => (\n              <ListItem key={node.addr+'peer'+peer.id}>\n                <ListItemText\n                  primary={`${peer.id.substr(0,10)} (${peer.state})`}\n                  secondary={peer.addrs.join(', ')}\n                />\n              </ListItem>\n            ))}\n            </List>\n          <Typography variant=\"body1\">\n            Disconnected:\n          </Typography>\n          <List dense>\n            {!node.peers &&\n              <ListItem>\n                <ListItemText\n                  primary=\"no info received\"\n                />\n              </ListItem>\n            }\n            {node.peers && node.peers.filter(p => p.state !== 'Connected').length === 0 && \n              <ListItem>\n                <ListItemText\n                  primary=\"none\"\n                />\n              </ListItem>\n            }\n            {node.peers && node.peers.filter(p => p.state !== 'Connected').sort((a,b) => a.state.localeCompare(b.state)).map(peer => (\n              <ListItem key={node.addr+'peer'+peer.id}>\n                <ListItemText\n                  primary={`${peer.id.substr(0,10)} (${peer.state})`}\n                  secondary={peer.addrs.join(', ')}\n                />\n              </ListItem>\n            ))}\n            </List>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel3a-content\"\n          id=\"panel3a-header\"\n        >\n          <Typography variant=\"button\">Node settings</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.section}>\n          {!node.settings && \n          <Typography variant=\"body1\">\n            No settings received.\n          </Typography>}\n          {node.settings && \n          <ReactJson\n          src={node.settings}\n          displayDataTypes={false}\n          displayObjectSize={false}\n          collapsed={false}\n          enableClipboard={false}\n          />\n          }\n        </AccordionDetails>\n      </Accordion>\n      <Button\n      target=\"_blank\" \n      rel=\"noopener\"\n      href={`http://${node.addr}:4457/_internal/swarm/state`}\n      color=\"primary\"\n      startIcon={<LaunchIcon />}\n      size=\"small\"\n      className={classes.swarmStateButton}\n      >\n        Open swarm state\n      </Button>\n\n        </Paper>\n      </Grid>\n      <Grid item xs={12}>\n        <Paper className={classes.paper}>\n          <Typography className={classes.title} variant=\"h6\" gutterBottom>Raw data about node at <span className={classes.data}>{node.addr}</span></Typography>\n          <ReactJson\n          src={node}\n          displayDataTypes={false}\n          displayObjectSize={false}\n          collapsed={true}\n          enableClipboard={false}\n          />\n        </Paper>\n      </Grid>\n      </Grid>\n    </div>\n  );\n};\n","/home/oliver/Repos/actyx-diagnostics/client/src/server.ts",[],"/home/oliver/Repos/actyx-diagnostics/client/src/Map.tsx",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133"],"import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  AppBar,\n  Box,\n  Button,\n  Collapse,\n  Container,\n  CssBaseline,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Toolbar,\n  Typography,\n  Chip,\n} from \"@material-ui/core\";\nimport Alert from '@material-ui/lab/Alert';\nimport LaunchIcon from \"@material-ui/icons/Launch\";\nimport { Option } from \"fp-ts/Option\";\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"@reduxjs/toolkit\";\nimport { reducer, State, Action, store } from \"./state\";\nimport { Server } from \"./server\";\nimport moment from \"moment\";\nimport { Node, isConnectedTo } from \"./common\";\nimport ReactJson from 'react-json-view'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    wordBreak: \"break-word\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  content: {\n    padding: 20,\n  },\n  table: {\n    minWidth: 650,\n  },\n  title: {\n    paddingBottom: theme.spacing(2),\n  },\n  data: {\n    backgroundColor: \"#eaeaea\",\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    fontFamily: \"monospace\",\n    fontWeight: 600,\n    color: \"#3f51b5\",\n  },\n  section: {\n    display: \"block\",\n  },\n  connectedChip: {\n    color: \"#4caf50\",\n    borderColor: \"#4caf50\" \n  },\n  launchIcon: {\n    fontSize: '1rem',\n  }\n}));\n\nexport const Map = ({ nodes }: { nodes: Node[] }) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const goBack = () => {\n    dispatch(Action.UnshowMap());\n  };\n\n  const showDetail = (node: Node) => {\n    dispatch(Action.ShowDetail(node))\n  }\n\n  return (\n    <div className={classes.root}>\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <Button\n          onClick={goBack}\n          size=\"small\"\n          color=\"default\"\n          variant=\"contained\"\n        >\n          Overview\n        </Button>\n      </Grid>\n      {nodes.length < 2 && <Grid item xs={12}>\n        <Alert severity=\"warning\">\n            Map will only show when at least two nodes are available.\n        </Alert>\n      </Grid>}\n      {nodes.length > 1 && <Grid item xs={12}>\n           <TableContainer component={Paper} className={classes.paper}>\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>From</TableCell>\n            <TableCell>To</TableCell>\n            <TableCell>State</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {nodes.sort((a,b) => a.addr.localeCompare(b.addr)).map(from => \n            nodes.filter(n => n.addr !== from.addr).sort((a,b) => a.addr.localeCompare(b.addr)).map((to, index) => \n              <TableRow key={from.addr+to.addr}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {index == 0 ? <>\n                  {from.addr}\n                  <IconButton color=\"default\" size=\"small\" onClick={() => showDetail(from)}>\n                    <LaunchIcon className={classes.launchIcon} />\n                  </IconButton>\n                    </>: ''}\n                  </TableCell>\n                  <TableCell>\n                  {to.addr}\n                </TableCell>\n                <TableCell>\n                  {isConnectedTo(from, to) ? (\n                    <Chip className={classes.connectedChip} label=\"CONNECTED\" color=\"primary\" size=\"small\" variant=\"outlined\" />\n                  ) : (\n                    <Chip label=\"DISCONNECTED\" color=\"secondary\" size=\"small\" variant=\"outlined\" />\n                  )}\n                </TableCell>\n              </TableRow>\n              )\n\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n      </Grid>}\n    </Grid>\n    </div>\n  );\n};\n","/home/oliver/Repos/actyx-diagnostics/client/src/common/index.ts",[],"/home/oliver/Repos/actyx-diagnostics/client/src/common/types.ts",["134","135","136","137","138","139","140","141"],"import * as io from 'io-ts'\nimport { DateFromISOString } from 'io-ts-types'\n\nconst NodeSettings_LogLevel = io.union([\n  io.literal('TRACE'),\n  io.literal('DEBUG'),\n  io.literal('WARN'),\n  io.literal('INFO'),\n  io.literal('ERROR'),\n  io.literal('FATAL'),\n])\n\nexport const NodeSettings = io.type({\n  general: io.type({\n    displayName: io.string,\n    swarmKey: io.string,\n    bootstrapNodes: io.array(io.string),\n    announceAddresses: io.array(io.string),\n    logLevels: io.type({\n      os: NodeSettings_LogLevel,\n      apps: NodeSettings_LogLevel,\n    }),\n  }),\n  services: io.type({\n    eventService: io.type({\n      topic: io.string,\n      readOnly: io.boolean,\n    }),\n  }),\n})\n\nexport const Node = io.type({\n  addr: io.string,\n  lastRequestAt: io.union([io.null, DateFromISOString]),\n  lastResponseAt: io.union([io.null, DateFromISOString]),\n  listenAddrs: io.union([io.null, io.array(io.string)]),\n  peers: io.union([\n    io.null,\n    io.array(\n      io.type({\n        id: io.string,\n        addrs: io.array(io.string),\n        state: io.union([\n          io.literal('Connected'),\n          io.literal('Disconnected'),\n          io.literal('Connecting'),\n        ]),\n      }),\n    ),\n  ]),\n  settings: io.union([io.null, NodeSettings]),\n})\n\nexport type Node = io.TypeOf<typeof Node>\n\n// -- Events emitted by client\nexport const RequestAddNode = io.type({\n  key: io.literal('RequestAddNode'),\n  addr: io.string,\n})\nexport type RequestAddNode = io.TypeOf<typeof RequestAddNode>\n\nexport const RequestRemoveNode = io.type({\n  key: io.literal('RequestRemoveNode'),\n  node: Node,\n})\nexport type RequestRemoveNode = io.TypeOf<typeof RequestRemoveNode>\n\n// -- Events emitted by server\nexport const NodeUpdated = io.type({\n  key: io.literal('NodeUpdated'),\n  node: Node,\n})\nexport type NodeUpdated = io.TypeOf<typeof NodeUpdated>\n\nexport const NodeRemoved = io.type({\n  key: io.literal('NodeRemoved'),\n  node: Node,\n})\nexport type NodeRemoved = io.TypeOf<typeof NodeRemoved>\n\nexport const ClientEvent = io.union([RequestAddNode, RequestRemoveNode])\nexport type ClientEvent = io.TypeOf<typeof ClientEvent>\nexport const ServerEvent = io.union([NodeUpdated, NodeRemoved])\nexport type ServerEvent = io.TypeOf<typeof ServerEvent>\n\nexport const Ack = io.union([\n  io.type({\n    status: io.literal('ok'),\n  }),\n  io.type({\n    status: io.literal('error'),\n    reason: io.string,\n  }),\n])\nexport type Ack = io.TypeOf<typeof Ack>\n","/home/oliver/Repos/actyx-diagnostics/client/src/common/util.ts",[],["142","143"],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"152","line":3,"column":10,"nodeType":"150","messageId":"151","endLine":3,"endColumn":21},{"ruleId":"153","severity":1,"message":"154","line":44,"column":14,"nodeType":"150","messageId":"155","endLine":44,"endColumn":20},{"ruleId":"148","severity":1,"message":"149","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"156","line":2,"column":8,"nodeType":"150","messageId":"151","endLine":2,"endColumn":12},{"ruleId":"148","severity":1,"message":"157","line":5,"column":3,"nodeType":"150","messageId":"151","endLine":5,"endColumn":9},{"ruleId":"148","severity":1,"message":"158","line":12,"column":3,"nodeType":"150","messageId":"151","endLine":12,"endColumn":12},{"ruleId":"148","severity":1,"message":"159","line":13,"column":3,"nodeType":"150","messageId":"151","endLine":13,"endColumn":14},{"ruleId":"148","severity":1,"message":"160","line":25,"column":3,"nodeType":"150","messageId":"151","endLine":25,"endColumn":10},{"ruleId":"148","severity":1,"message":"161","line":30,"column":10,"nodeType":"150","messageId":"151","endLine":30,"endColumn":16},{"ruleId":"148","severity":1,"message":"162","line":31,"column":10,"nodeType":"150","messageId":"151","endLine":31,"endColumn":18},{"ruleId":"148","severity":1,"message":"163","line":32,"column":10,"nodeType":"150","messageId":"151","endLine":32,"endColumn":25},{"ruleId":"148","severity":1,"message":"164","line":32,"column":27,"nodeType":"150","messageId":"151","endLine":32,"endColumn":38},{"ruleId":"148","severity":1,"message":"165","line":33,"column":10,"nodeType":"150","messageId":"151","endLine":33,"endColumn":17},{"ruleId":"148","severity":1,"message":"166","line":33,"column":34,"nodeType":"150","messageId":"151","endLine":33,"endColumn":39},{"ruleId":"167","severity":1,"message":"168","line":73,"column":25,"nodeType":"169","messageId":"170","endLine":73,"endColumn":27},{"ruleId":"148","severity":1,"message":"171","line":231,"column":7,"nodeType":"150","messageId":"151","endLine":231,"endColumn":17},{"ruleId":"148","severity":1,"message":"172","line":335,"column":7,"nodeType":"150","messageId":"151","endLine":335,"endColumn":12},{"ruleId":"148","severity":1,"message":"173","line":414,"column":9,"nodeType":"150","messageId":"151","endLine":414,"endColumn":16},{"ruleId":"148","severity":1,"message":"149","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"174","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"156","line":2,"column":8,"nodeType":"150","messageId":"151","endLine":2,"endColumn":12},{"ruleId":"148","severity":1,"message":"157","line":8,"column":3,"nodeType":"150","messageId":"151","endLine":8,"endColumn":9},{"ruleId":"148","severity":1,"message":"175","line":9,"column":3,"nodeType":"150","messageId":"151","endLine":9,"endColumn":6},{"ruleId":"148","severity":1,"message":"176","line":11,"column":3,"nodeType":"150","messageId":"151","endLine":11,"endColumn":11},{"ruleId":"148","severity":1,"message":"158","line":12,"column":3,"nodeType":"150","messageId":"151","endLine":12,"endColumn":12},{"ruleId":"148","severity":1,"message":"159","line":13,"column":3,"nodeType":"150","messageId":"151","endLine":13,"endColumn":14},{"ruleId":"148","severity":1,"message":"177","line":15,"column":3,"nodeType":"150","messageId":"151","endLine":15,"endColumn":13},{"ruleId":"148","severity":1,"message":"178","line":22,"column":3,"nodeType":"150","messageId":"151","endLine":22,"endColumn":8},{"ruleId":"148","severity":1,"message":"179","line":23,"column":3,"nodeType":"150","messageId":"151","endLine":23,"endColumn":12},{"ruleId":"148","severity":1,"message":"180","line":24,"column":3,"nodeType":"150","messageId":"151","endLine":24,"endColumn":12},{"ruleId":"148","severity":1,"message":"181","line":25,"column":3,"nodeType":"150","messageId":"151","endLine":25,"endColumn":17},{"ruleId":"148","severity":1,"message":"182","line":26,"column":3,"nodeType":"150","messageId":"151","endLine":26,"endColumn":12},{"ruleId":"148","severity":1,"message":"183","line":27,"column":3,"nodeType":"150","messageId":"151","endLine":27,"endColumn":11},{"ruleId":"148","severity":1,"message":"184","line":28,"column":3,"nodeType":"150","messageId":"151","endLine":28,"endColumn":12},{"ruleId":"148","severity":1,"message":"160","line":29,"column":3,"nodeType":"150","messageId":"151","endLine":29,"endColumn":10},{"ruleId":"148","severity":1,"message":"185","line":31,"column":3,"nodeType":"150","messageId":"151","endLine":31,"endColumn":7},{"ruleId":"148","severity":1,"message":"186","line":33,"column":8,"nodeType":"150","messageId":"151","endLine":33,"endColumn":27},{"ruleId":"148","severity":1,"message":"187","line":34,"column":8,"nodeType":"150","messageId":"151","endLine":34,"endColumn":29},{"ruleId":"148","severity":1,"message":"161","line":38,"column":10,"nodeType":"150","messageId":"151","endLine":38,"endColumn":16},{"ruleId":"148","severity":1,"message":"162","line":39,"column":10,"nodeType":"150","messageId":"151","endLine":39,"endColumn":18},{"ruleId":"148","severity":1,"message":"188","line":39,"column":33,"nodeType":"150","messageId":"151","endLine":39,"endColumn":44},{"ruleId":"148","severity":1,"message":"163","line":40,"column":10,"nodeType":"150","messageId":"151","endLine":40,"endColumn":25},{"ruleId":"148","severity":1,"message":"164","line":40,"column":27,"nodeType":"150","messageId":"151","endLine":40,"endColumn":38},{"ruleId":"148","severity":1,"message":"165","line":41,"column":10,"nodeType":"150","messageId":"151","endLine":41,"endColumn":17},{"ruleId":"148","severity":1,"message":"189","line":41,"column":19,"nodeType":"150","messageId":"151","endLine":41,"endColumn":24},{"ruleId":"148","severity":1,"message":"166","line":41,"column":34,"nodeType":"150","messageId":"151","endLine":41,"endColumn":39},{"ruleId":"148","severity":1,"message":"190","line":42,"column":10,"nodeType":"150","messageId":"151","endLine":42,"endColumn":16},{"ruleId":"148","severity":1,"message":"149","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"174","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"156","line":2,"column":8,"nodeType":"150","messageId":"151","endLine":2,"endColumn":12},{"ruleId":"148","severity":1,"message":"191","line":5,"column":3,"nodeType":"150","messageId":"151","endLine":5,"endColumn":12},{"ruleId":"148","severity":1,"message":"192","line":6,"column":3,"nodeType":"150","messageId":"151","endLine":6,"endColumn":19},{"ruleId":"148","severity":1,"message":"193","line":7,"column":3,"nodeType":"150","messageId":"151","endLine":7,"endColumn":19},{"ruleId":"148","severity":1,"message":"157","line":8,"column":3,"nodeType":"150","messageId":"151","endLine":8,"endColumn":9},{"ruleId":"148","severity":1,"message":"175","line":9,"column":3,"nodeType":"150","messageId":"151","endLine":9,"endColumn":6},{"ruleId":"148","severity":1,"message":"176","line":11,"column":3,"nodeType":"150","messageId":"151","endLine":11,"endColumn":11},{"ruleId":"148","severity":1,"message":"158","line":12,"column":3,"nodeType":"150","messageId":"151","endLine":12,"endColumn":12},{"ruleId":"148","severity":1,"message":"159","line":13,"column":3,"nodeType":"150","messageId":"151","endLine":13,"endColumn":14},{"ruleId":"148","severity":1,"message":"194","line":16,"column":3,"nodeType":"150","messageId":"151","endLine":16,"endColumn":7},{"ruleId":"148","severity":1,"message":"195","line":17,"column":3,"nodeType":"150","messageId":"151","endLine":17,"endColumn":11},{"ruleId":"148","severity":1,"message":"196","line":18,"column":3,"nodeType":"150","messageId":"151","endLine":18,"endColumn":15},{"ruleId":"148","severity":1,"message":"197","line":19,"column":3,"nodeType":"150","messageId":"151","endLine":19,"endColumn":15},{"ruleId":"148","severity":1,"message":"184","line":28,"column":3,"nodeType":"150","messageId":"151","endLine":28,"endColumn":12},{"ruleId":"148","severity":1,"message":"160","line":29,"column":3,"nodeType":"150","messageId":"151","endLine":29,"endColumn":10},{"ruleId":"148","severity":1,"message":"198","line":30,"column":3,"nodeType":"150","messageId":"151","endLine":30,"endColumn":13},{"ruleId":"148","severity":1,"message":"161","line":35,"column":10,"nodeType":"150","messageId":"151","endLine":35,"endColumn":16},{"ruleId":"148","severity":1,"message":"162","line":36,"column":10,"nodeType":"150","messageId":"151","endLine":36,"endColumn":18},{"ruleId":"148","severity":1,"message":"188","line":36,"column":33,"nodeType":"150","messageId":"151","endLine":36,"endColumn":44},{"ruleId":"148","severity":1,"message":"163","line":37,"column":10,"nodeType":"150","messageId":"151","endLine":37,"endColumn":25},{"ruleId":"148","severity":1,"message":"164","line":37,"column":27,"nodeType":"150","messageId":"151","endLine":37,"endColumn":38},{"ruleId":"148","severity":1,"message":"165","line":38,"column":10,"nodeType":"150","messageId":"151","endLine":38,"endColumn":17},{"ruleId":"148","severity":1,"message":"189","line":38,"column":19,"nodeType":"150","messageId":"151","endLine":38,"endColumn":24},{"ruleId":"148","severity":1,"message":"166","line":38,"column":34,"nodeType":"150","messageId":"151","endLine":38,"endColumn":39},{"ruleId":"148","severity":1,"message":"190","line":39,"column":10,"nodeType":"150","messageId":"151","endLine":39,"endColumn":16},{"ruleId":"148","severity":1,"message":"199","line":40,"column":8,"nodeType":"150","messageId":"151","endLine":40,"endColumn":14},{"ruleId":"148","severity":1,"message":"200","line":42,"column":8,"nodeType":"150","messageId":"151","endLine":42,"endColumn":17},{"ruleId":"201","severity":1,"message":"202","line":126,"column":26,"nodeType":"203","messageId":"204","endLine":126,"endColumn":28},{"ruleId":"153","severity":1,"message":"205","line":54,"column":13,"nodeType":"150","messageId":"155","endLine":54,"endColumn":17},{"ruleId":"153","severity":1,"message":"206","line":61,"column":13,"nodeType":"150","messageId":"155","endLine":61,"endColumn":27},{"ruleId":"153","severity":1,"message":"207","line":67,"column":13,"nodeType":"150","messageId":"155","endLine":67,"endColumn":30},{"ruleId":"153","severity":1,"message":"208","line":74,"column":13,"nodeType":"150","messageId":"155","endLine":74,"endColumn":24},{"ruleId":"153","severity":1,"message":"209","line":80,"column":13,"nodeType":"150","messageId":"155","endLine":80,"endColumn":24},{"ruleId":"153","severity":1,"message":"210","line":83,"column":13,"nodeType":"150","messageId":"155","endLine":83,"endColumn":24},{"ruleId":"153","severity":1,"message":"211","line":85,"column":13,"nodeType":"150","messageId":"155","endLine":85,"endColumn":24},{"ruleId":"153","severity":1,"message":"212","line":96,"column":13,"nodeType":"150","messageId":"155","endLine":96,"endColumn":16},{"ruleId":"144","replacedBy":"213"},{"ruleId":"146","replacedBy":"214"},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ThunkAction' is defined but never used.","@typescript-eslint/no-redeclare","'Action' is already defined.","redeclared","'logo' is defined but never used.","'AppBar' is defined but never used.","'Container' is defined but never used.","'CssBaseline' is defined but never used.","'Toolbar' is defined but never used.","'Option' is defined but never used.","'Provider' is defined but never used.","'applyMiddleware' is defined but never used.","'createStore' is defined but never used.","'reducer' is defined but never used.","'store' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'NodesTable' is assigned a value but never used.","'Debug' is assigned a value but never used.","'classes' is assigned a value but never used.","'useState' is defined but never used.","'Box' is defined but never used.","'Collapse' is defined but never used.","'IconButton' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'TextField' is defined but never used.","'Link' is defined but never used.","'KeyboardArrowUpIcon' is defined but never used.","'KeyboardArrowDownIcon' is defined but never used.","'useSelector' is defined but never used.","'State' is defined but never used.","'Server' is defined but never used.","'Accordion' is defined but never used.","'AccordionDetails' is defined but never used.","'AccordionSummary' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'Typography' is defined but never used.","'moment' is defined but never used.","'ReactJson' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Node' is already defined.","'RequestAddNode' is already defined.","'RequestRemoveNode' is already defined.","'NodeUpdated' is already defined.","'NodeRemoved' is already defined.","'ClientEvent' is already defined.","'ServerEvent' is already defined.","'Ack' is already defined.",["215"],["216"],"no-global-assign","no-unsafe-negation"]